"use client"

import React, { useState, useEffect, useCallback } from 'react';
import { D3TradeMap } from "@/components/D3TradeMap";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import * as Tabs from '@radix-ui/react-tabs';
import * as Separator from '@radix-ui/react-separator';
import { InfoCircledIcon, BarChartIcon, GlobeIcon, ChevronRightIcon, ReloadIcon, ArrowUpIcon, ArrowDownIcon, MagnifyingGlassIcon, Cross2Icon, PinRightIcon } from '@radix-ui/react-icons';
import { mockGlobalHighlights, mockRegionData, mockTradeRelationships, mockTradeStatistics } from './mock-data';
import { RegionData, CountriesTradeResponse, CountryTradeItem, GlobalTotals, CountrySpecificTradeResponse, CountrySpecificTradeItem } from './types';
import * as Popover from '@radix-ui/react-popover';
import ClientOnly from '@/lib/use-client-only';
import { getCountriesTradeData, getCountrySpecificTradeData } from '@/lib/api-utils';
import { Search, ChevronRight, BarChart3, ArrowUpRight, TrendingUp, Globe, ChevronDown, CircleDot } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { formatNumber, formatCurrency } from '@/lib/utils';
import { enhancedCountryCodeConverter, mapCountryNameToAlpha2 } from '@/lib/country-utils';
import { Skeleton } from '@/components/ui/skeleton';
import Link from 'next/link';
import Image from 'next/image';

// Sample countries list (in a real application, this would come from your API)
const SAMPLE_COUNTRIES = [
  "United States", "China", "Japan", "Germany", "United Kingdom", 
  "France", "India", "Italy", "Brazil", "Canada", "South Korea", 
  "Russia", "Australia", "Spain", "Mexico", "Indonesia", "Netherlands", 
  "Saudi Arabia", "Turkey", "Switzerland", "Poland", "Sweden", "Belgium", 
  "Thailand", "Austria", "Nigeria", "United Arab Emirates", "Singapore", 
  "Vietnam", "Malaysia"
];

// Map countries to their regions
const COUNTRY_TO_REGION = {
  "United States": "North America",
  "China": "Asia",
  "Japan": "Asia",
  "Germany": "Europe",
  "United Kingdom": "Europe",
  "France": "Europe",
  "India": "Asia",
  "Italy": "Europe",
  "Brazil": "South America",
  "Canada": "North America",
  "South Korea": "Asia",
  "Australia": "Oceania",
  "Spain": "Europe",
  "Mexico": "North America",
  "Indonesia": "Asia",
  "Netherlands": "Europe",
  "Saudi Arabia": "Middle East",
  "Turkey": "Middle East",
  "Switzerland": "Europe",
  "Taiwan": "Asia",
  "Poland": "Europe",
  "Thailand": "Asia",
  "Sweden": "Europe",
  "Belgium": "Europe",
  "Nigeria": "Africa",
  "Austria": "Europe",
  "Norway": "Europe",
  "United Arab Emirates": "Middle East",
  "Ireland": "Europe",
  "Singapore": "Asia"
};

// Map countries to their ISO codes for flags
const COUNTRY_TO_ISO = {
  "United States": "us",
  "China": "cn",
  "Japan": "jp",
  "Germany": "de",
  "United Kingdom": "gb",
  "France": "fr",
  "India": "in",
  "Italy": "it",
  "Brazil": "br",
  "Canada": "ca",
  "South Korea": "kr",
  "Russia": "ru",
  "Australia": "au",
  "Spain": "es",
  "Mexico": "mx",
  "Indonesia": "id",
  "Netherlands": "nl",
  "Saudi Arabia": "sa",
  "Turkey": "tr",
  "Switzerland": "ch",
  "Poland": "pl",
  "Sweden": "se",
  "Belgium": "be",
  "Thailand": "th",
  "Austria": "at",
  "Nigeria": "ng",
  "United Arab Emirates": "ae",
  "Singapore": "sg",
  "Vietnam": "vn",
  "Malaysia": "my"
};

export default function MapDashboardPage() {
  const [selectedRegion, setSelectedRegion] = useState<string | null>(null);
  const [selectedCountry, setSelectedCountry] = useState<string | null>(null);
  const [selectedCountryCode, setSelectedCountryCode] = useState<string | null>(null);
  const [mapReady, setMapReady] = useState<boolean>(false);
  const regionData = selectedRegion ? mockRegionData[selectedRegion] : null;
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [filteredCountries, setFilteredCountries] = useState<string[]>([]);
  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);
  const [isSearchSticky, setIsSearchSticky] = useState<boolean>(false);
  const [countriesTradeData, setCountriesTradeData] = useState<CountryTradeItem[]>([]);
  const [globalTotals, setGlobalTotals] = useState<GlobalTotals | null>(null);
  const [countrySpecificTradeData, setCountrySpecificTradeData] = useState<CountrySpecificTradeItem[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedYear, setSelectedYear] = useState<string>('2023');
  const [countryDataLoading, setCountryDataLoading] = useState<boolean>(false);

  // Fetch countries trade data on component mount and when year changes
  useEffect(() => {
    async function fetchCountriesTradeData() {
      try {
        setIsLoading(true);
        const response = await getCountriesTradeData(selectedYear);
        
        if (response.success) {
          setCountriesTradeData(response.data.countries);
          setGlobalTotals(response.data.globalTotals);
        } else {
          setError('Failed to load trade data');
        }
      } catch (err) {
        console.error('Error fetching countries trade data:', err);
        setError('Failed to load trade data');
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchCountriesTradeData();
  }, [selectedYear]);

  // Available regions for mapping to countries
  const availableRegions = Object.keys(mockRegionData);
  
  // Effect for handling scroll events to make search sticky
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 20) {
        setIsSearchSticky(true);
      } else {
        setIsSearchSticky(false);
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Update filtered countries when search query changes
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredCountries([]);
      return;
    }
    
    const filtered = SAMPLE_COUNTRIES.filter(country => 
      country.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setFilteredCountries(filtered);
    setShowSuggestions(true);
  }, [searchQuery]);

  // Handle map ready state
  const handleMapReady = useCallback(() => {
    setMapReady(true);
  }, []);

  // Handle region selection (for data display)
  const handleRegionSelect = (region: string) => {
    // Check if the region is actually a country (when clicked on the map)
    if (SAMPLE_COUNTRIES.includes(region)) {
      // It's a country click from the map
      handleCountrySelect(region);
    } else {
      // It's a regular region selection
      setSelectedRegion(region);
    }
  };
  
  // Fetch country-specific trade data
  const fetchCountrySpecificData = async (countryCode: string) => {
    try {
      setCountryDataLoading(true);
      
      // Make sure we're using alpha-2 code for the API
      const alpha2Code = countryCode.length === 3 
        ? (enhancedCountryCodeConverter(countryCode) || countryCode) 
        : countryCode;
      
      // Get trade data specific to the country
      const data = await getCountrySpecificTradeData(alpha2Code, selectedYear);
      
      if (data) {
        setCountrySpecificTradeData(data);
      }
    } catch (error) {
      console.error('Error fetching country data:', error);
    } finally {
      setCountryDataLoading(false);
    }
  };
  
  // Get ISO code from country name
  const getCountryCode = (countryName: string): string | null => {
    const isoCode = Object.entries(COUNTRY_TO_ISO).find(([name]) => 
      name.toLowerCase() === countryName.toLowerCase()
    );
    
    return isoCode ? isoCode[1] : null;
  };
  
  // Handle country selection (from search or map click)
  const handleCountrySelect = async (country: string) => {
    if (!mapReady) {
      console.warn("Map is not ready yet, waiting before focusing country");
      // Wait a bit before setting the country to focus
      setTimeout(() => {
        setSelectedCountry(country);
        setSearchQuery(country);
        setShowSuggestions(false);
        
        // Map the country to a region for our mock data
        const countryRegion = COUNTRY_TO_REGION[country as keyof typeof COUNTRY_TO_REGION];
        if (countryRegion) {
          setSelectedRegion(countryRegion);
        } else {
          setSelectedRegion("Europe"); // Default fallback
        }
        
        // Get country code and fetch specific trade data
        const countryCode = getCountryCode(country);
        if (countryCode) {
          setSelectedCountryCode(countryCode);
          fetchCountrySpecificData(countryCode);
        }
      }, 1000);
      return;
    }
    
    setSelectedCountry(country);
    setSearchQuery(country);
    setShowSuggestions(false);
    
    // Map the country to a region for our mock data
    const countryRegion = COUNTRY_TO_REGION[country as keyof typeof COUNTRY_TO_REGION];
    if (countryRegion) {
      setSelectedRegion(countryRegion);
    } else {
      setSelectedRegion("Europe"); // Default fallback
    }
    
    // Get country code and fetch specific trade data
    const countryCode = getCountryCode(country);
    if (countryCode) {
      setSelectedCountryCode(countryCode);
      fetchCountrySpecificData(countryCode);
    }
  };

  const clearSearch = () => {
    setSearchQuery('');
    setFilteredCountries([]);
    setShowSuggestions(false);
    setSelectedCountry(null);
    setSelectedCountryCode(null);
    setCountrySpecificTradeData([]);
  };

  const formatValue = (value: string | number, isPercentage: boolean = false, trillions: boolean = false) => {
    // Handle null or undefined values
    if (value === null || value === undefined) {
      return isPercentage ? '0.0%' : trillions ? '$0.0 trillion' : '$0';
    }
    
    if (typeof value === 'string') {
      // If it's already a formatted string, just return it
      return value;
    }
    
    if (isPercentage) {
      return `${value.toFixed(1)}%`;
    }
    if (trillions) {
      return `$${value.toFixed(1)} trillion`;
    }
    
    // Format as a standard USD value with commas for thousands
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      maximumFractionDigits: 0
    }).format(value);
  };

  const formatTrend = (value: number) => {
    const isPositive = value >= 0;
    return (
      <div className="flex items-center">
        {isPositive ? (
          <ArrowUpIcon className="mr-1 h-4 w-4 text-green-500" />
        ) : (
          <ArrowDownIcon className="mr-1 h-4 w-4 text-red-500" />
        )}
        <span className={isPositive ? "text-green-500" : "text-red-500"}>
          {isPositive ? "+" : ""}{value.toFixed(1)}%
        </span>
      </div>
    );
  };

  return (
    <div className="relative h-screen w-full overflow-hidden">
      {/* Map section - full screen background */}
      <div className="absolute inset-0 w-full h-full">
        <ClientOnly>
          {isLoading && !countriesTradeData.length && (
            <div className="absolute inset-0 flex items-center justify-center bg-background/50 backdrop-blur-sm z-30">
              <div className="flex flex-col items-center space-y-4">
                <div className="h-12 w-12 animate-spin rounded-full border-4 border-primary border-t-transparent"></div>
                <p className="text-foreground font-medium">Loading trade data...</p>
              </div>
            </div>
          )}
          
          {error && !countriesTradeData.length && (
            <div className="absolute inset-0 flex items-center justify-center bg-background/50 backdrop-blur-sm z-30">
              <div className="bg-background p-6 rounded-lg shadow-lg max-w-md">
                <h3 className="text-xl font-bold text-red-500 mb-2">Error Loading Data</h3>
                <p className="text-foreground mb-4">{error}</p>
                <button 
                  onClick={() => window.location.reload()}
                  className="px-4 py-2 bg-primary text-primary-foreground rounded-md"
                >
                  Retry
                </button>
              </div>
            </div>
          )}
          
          <D3TradeMap 
            onRegionSelect={handleRegionSelect} 
            isBackground={true} 
            focusCountry={selectedCountry}
            onMapReady={handleMapReady}
            countriesData={countriesTradeData}
          />
        </ClientOnly>
      </div>
      
      {/* Search bar overlay - sticky on left side */}
      <div className={`fixed left-0 ml-6 z-20 transition-all duration-300 ${
        isSearchSticky ? 'top-20 sm:top-24' : 'top-30 sm:top-32'
      }`}>
        <div className="bg-background/90 backdrop-blur-sm p-4 rounded-lg shadow-md w-72">
          <div className="flex items-center justify-between mb-2">
            <h2 className="text-lg font-semibold">Find Country</h2>
            {selectedCountry && (
              <div className="flex items-center space-x-1 text-xs px-2 py-1 bg-primary/20 rounded-full">
                <PinRightIcon className="h-3 w-3" />
                <span>Focused</span>
              </div>
            )}
          </div>
          <div className="relative ">
            <div className="flex ">
              <div className="relative flex-grow ">
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onFocus={() => setShowSuggestions(true)}
                  placeholder="Search countries..."
                  className="px-3 py-2 w-full rounded-l-md border border-input bg-background"
                />
                {searchQuery && (
                  <button 
                    onClick={clearSearch}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground"
                  >
                    <Cross2Icon className="h-4 w-4" />
                  </button>
                )}
              </div>
              <button
                className="px-3 py-2 rounded-r-md bg-primary text-primary-foreground border border-primary"
              >
                <MagnifyingGlassIcon className="h-4 w-4" />
              </button>
            </div>
            
            {/* Autosuggestion dropdown */}
            {showSuggestions && filteredCountries.length > 0 && (
              <div className="absolute top-full left-0 right-0 mt-1 bg-background border border-input rounded-md shadow-lg max-h-60 overflow-y-auto z-20">
                {filteredCountries.map((country) => (
                  <div
                    key={country}
                    className="px-3 py-2 hover:bg-muted cursor-pointer"
                    onClick={() => handleCountrySelect(country)}
                  >
                    {country}
                  </div>
                ))}
              </div>
            )}
          </div>
          
          {/* Year selector */}
          <div className="mt-4">
            <h3 className="text-sm font-medium mb-2">Year</h3>
            <div className="grid grid-cols-3 gap-2">
              {['2023', '2022', '2021'].map((year) => (
                <button
                  key={year}
                  onClick={() => setSelectedYear(year)}
                  className={`text-xs px-2 py-1 rounded-full ${
                    selectedYear === year 
                      ? 'bg-primary text-primary-foreground' 
                      : 'bg-muted hover:bg-accent hover:text-accent-foreground'
                  }`}
                >
                  {year}
                </button>
              ))}
            </div>
          </div>
          
          <div className="mt-4">
            <h3 className="text-sm font-medium mb-2">Popular Countries</h3>
            <div className="flex flex-wrap gap-2">
              {['United States', 'China', 'Germany', 'Japan', 'United Kingdom'].map((country) => (
                <button
                  key={country}
                  onClick={() => handleCountrySelect(country)}
                  className="text-xs px-2 py-1 bg-muted rounded-full hover:bg-accent hover:text-accent-foreground"
                >
                  {country}
                </button>
              ))}
            </div>
          </div>
          
          {!mapReady && (
            <div className="mt-4 text-xs text-muted-foreground">
              <div className="flex items-center">
                <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-primary mr-2"></div>
                <span>Loading map data...</span>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Overlay content - information cards */}
      <div className="absolute right-0 top-0 bottom-0 w-1/3 p-6 flex flex-col bg-background/90 backdrop-blur-sm z-10 overflow-y-auto">
        <ClientOnly>
          <div className="flex items-center mb-6">
            <h1 className="text-3xl font-bold">Trade Dashboard</h1>
            <Popover.Root>
              <Popover.Trigger asChild>
                <button className="ml-2 rounded-full hover:bg-muted p-1 inline-flex items-center justify-center">
                  <InfoCircledIcon className="h-5 w-5 text-muted-foreground" />
                </button>
              </Popover.Trigger>
              <Popover.Portal>
                <Popover.Content
                  className="w-80 p-4 rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80 z-50"
                  sideOffset={5}
                >
                  <div className="space-y-2">
                    <h3 className="font-medium">About This Dashboard</h3>
                    <p className="text-sm text-muted-foreground">
                      This dashboard provides real-time global trade data visualization. Use the search feature to find specific countries, view detailed statistics, and analyze trade relationships between nations.
                    </p>
                    <p className="text-sm text-muted-foreground">
                      Data is sourced from international trade databases and updated quarterly.
                    </p>
                  </div>
                  <Popover.Arrow className="fill-popover" />
                </Popover.Content>
              </Popover.Portal>
            </Popover.Root>
          </div>
          
          {selectedCountry && (
            <div className="mb-4 bg-muted/70 p-3 rounded-md">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  {COUNTRY_TO_ISO[selectedCountry as keyof typeof COUNTRY_TO_ISO] && (
                    <div className="w-6 h-4 relative">
                      <img 
                        src={`https://flagcdn.com/${COUNTRY_TO_ISO[selectedCountry as keyof typeof COUNTRY_TO_ISO]}.svg`} 
                        alt={`${selectedCountry} flag`}
                        className="w-full h-full object-cover rounded absolute"
                        onError={(e) => {
                          // Try alternative flag source if primary one fails
                          const target = e.target as HTMLImageElement;
                          const countryCode = COUNTRY_TO_ISO[selectedCountry as keyof typeof COUNTRY_TO_ISO];
                          // Try another flag API as fallback
                          target.src = `https://flagsapi.com/${countryCode.toUpperCase()}/flat/24.png`;
                          
                          // If second source also fails
                          target.onerror = () => {
                            // Try third fallback
                            target.src = `https://cdn.jsdelivr.net/npm/country-flag-emoji-json@2.0.0/dist/images/${countryCode}.svg`;
                            
                            // If all sources fail, show a placeholder
                            target.onerror = () => {
                              target.style.display = 'none';
                            };
                          };
                        }}
                      />
                    </div>
                  )}
                  <h2 className="text-xl font-semibold">{selectedCountry}</h2>
                </div>
                <button 
                  onClick={clearSearch} 
                  className="text-xs px-2 py-1 bg-muted hover:bg-accent hover:text-accent-foreground rounded-full"
                >
                  Clear Focus
                </button>
              </div>
              <p className="text-sm text-muted-foreground mt-1">
                {countryDataLoading ? 'Loading trade data...' : `Viewing trade data related to ${selectedCountry}`}
              </p>
              {error && <p className="text-sm text-red-500 mt-1">{error}</p>}
            </div>
          )}
          
          {/* Global highlights at the top */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            {selectedCountry && selectedCountryCode && countriesTradeData.length > 0 ? (
              // If a country is selected, show its trade metrics
              <>
                {(() => {
                  // Find the selected country data
                  const countryData = countriesTradeData.find(c => c.country === selectedCountryCode);
                  if (!countryData) return null;
                  
                  // Calculate exports and imports percentage of global totals
                  const exportsPercentage = globalTotals ? (countryData.exports / globalTotals.total_exports) * 100 : 0;
                  const importsPercentage = globalTotals ? (countryData.imports / globalTotals.total_imports) * 100 : 0;
                  
                  return (
                    <>
                      <Card className="shadow-sm bg-background/80 backdrop-blur-sm">
                        <CardHeader className="pb-2">
                          <CardTitle className="text-sm font-medium text-muted-foreground">Total Exports</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="flex justify-between items-center">
                            <div className="text-2xl font-bold">${(countryData.exports / 1000).toFixed(2)}B</div>
                            <div className="text-xs text-muted-foreground">{exportsPercentage.toFixed(2)}% of global</div>
                          </div>
                        </CardContent>
                      </Card>
                      <Card className="shadow-sm bg-background/80 backdrop-blur-sm">
                        <CardHeader className="pb-2">
                          <CardTitle className="text-sm font-medium text-muted-foreground">Total Imports</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="flex justify-between items-center">
                            <div className="text-2xl font-bold">${(countryData.imports / 1000).toFixed(2)}B</div>
                            <div className="text-xs text-muted-foreground">{importsPercentage.toFixed(2)}% of global</div>
                          </div>
                        </CardContent>
                      </Card>
                      <Card className="shadow-sm bg-background/80 backdrop-blur-sm">
                        <CardHeader className="pb-2">
                          <CardTitle className="text-sm font-medium text-muted-foreground">Total Trade</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="flex justify-between items-center">
                            <div className="text-2xl font-bold">${(countryData.total_trade / 1000).toFixed(2)}B</div>
                            <div className="text-xs text-muted-foreground">
                              {globalTotals ? ((countryData.total_trade / globalTotals.total_trade) * 100).toFixed(2) : 0}% of global
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                      <Card className="shadow-sm bg-background/80 backdrop-blur-sm">
                        <CardHeader className="pb-2">
                          <CardTitle className="text-sm font-medium text-muted-foreground">Trade Balance</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="flex justify-between items-center">
                            <div className="text-2xl font-bold">${((countryData.exports - countryData.imports) / 1000).toFixed(2)}B</div>
                            {countryData.exports > countryData.imports ? (
                              <ArrowUpIcon className="h-4 w-4 text-green-500" />
                            ) : (
                              <ArrowDownIcon className="h-4 w-4 text-red-500" />
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    </>
                  );
                })()}
              </>
            ) : (
              // Otherwise, show the global highlights
              mockGlobalHighlights.map((highlight, index) => (
                <Card key={index} className="shadow-sm bg-background/80 backdrop-blur-sm">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium text-muted-foreground">{highlight.title}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex justify-between items-center">
                      <div className="text-2xl font-bold">{highlight.value}</div>
                      {formatTrend(highlight.change)}
                    </div>
                    <p className="text-xs text-muted-foreground mt-1">{highlight.description}</p>
                  </CardContent>
                </Card>
              ))
            )}
          </div>
          
          {/* Central content with tabs */}
          <Card className="flex-grow mb-6 shadow-sm bg-background/80 backdrop-blur-sm">
            <Tabs.Root defaultValue="overview" className="h-full flex flex-col">
              <CardHeader className="pb-0">
                <div className="flex justify-between items-center">
                  <CardTitle>
                    {selectedCountry 
                      ? `${selectedCountry} Overview` 
                      : selectedRegion 
                        ? `${selectedRegion} Overview` 
                        : 'Global Trade Analysis'}
                  </CardTitle>
                  <Tabs.List className="flex space-x-2">
                    <Tabs.Trigger 
                      value="overview" 
                      className="px-3 py-1 rounded-md data-[state=active]:bg-muted"
                    >
                      <div className="flex items-center space-x-1">
                        <InfoCircledIcon className="h-4 w-4" />
                        <span>Overview</span>
                      </div>
                    </Tabs.Trigger>
                    <Tabs.Trigger 
                      value="statistics" 
                      className="px-3 py-1 rounded-md data-[state=active]:bg-muted"
                    >
                      <div className="flex items-center space-x-1">
                        <BarChartIcon className="h-4 w-4" />
                        <span>Statistics</span>
                      </div>
                    </Tabs.Trigger>
                    <Tabs.Trigger 
                      value="relationships" 
                      className="px-3 py-1 rounded-md data-[state=active]:bg-muted"
                    >
                      <div className="flex items-center space-x-1">
                        <GlobeIcon className="h-4 w-4" />
                        <span>Relationships</span>
                      </div>
                    </Tabs.Trigger>
                  </Tabs.List>
                </div>
              </CardHeader>
              <CardContent className="flex-grow overflow-auto pt-4">
                <Tabs.Content value="overview" className="h-full">
                  {selectedCountry && selectedCountryCode && countrySpecificTradeData.length > 0 ? (
                    <div className="space-y-6">
                      <div className="grid grid-cols-3 gap-4">
                        <Card className="bg-background/80">
                          <CardHeader className="pb-2">
                            <CardTitle className="text-sm">Region</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="text-xl font-bold">
                              {countrySpecificTradeData[0]?.region || 'N/A'}
                            </div>
                          </CardContent>
                        </Card>
                        <Card className="bg-background/80">
                          <CardHeader className="pb-2">
                            <CardTitle className="text-sm">Sub-Region</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="text-xl font-bold">
                              {countrySpecificTradeData[0]?.sub_region || 'N/A'}
                            </div>
                          </CardContent>
                        </Card>
                        <Card className="bg-background/80">
                          <CardHeader className="pb-2">
                            <CardTitle className="text-sm">Products Count</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="text-xl font-bold">
                              {countrySpecificTradeData.length}
                            </div>
                          </CardContent>
                        </Card>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-semibold mb-3">Top Products</h3>
                        <div className="space-y-2">
                          {countrySpecificTradeData.slice(0, 5).map((product, index) => (
                            <div key={index} className="flex justify-between items-center p-2 rounded-md bg-muted/70">
                              <span>{product.product_name}</span>
                              <div className="flex items-center space-x-4">
                                <span className="text-muted-foreground">${(product.value / 1000).toFixed(2)}B</span>
                                <span className="text-sm">{(product.percent_trade || 0).toFixed(1)}%</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  ) : regionData ? (
                    <div className="space-y-6">
                      <div className="grid grid-cols-3 gap-4">
                        <Card className="bg-background/80">
                          <CardHeader className="pb-2">
                            <CardTitle className="text-sm">Population</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="text-xl font-bold">{regionData.population} million</div>
                          </CardContent>
                        </Card>
                        <Card className="bg-background/80">
                          <CardHeader className="pb-2">
                            <CardTitle className="text-sm">GDP</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="text-xl font-bold">{formatValue(regionData.gdp, false, true)}</div>
                          </CardContent>
                        </Card>
                        <Card className="bg-background/80">
                          <CardHeader className="pb-2">
                            <CardTitle className="text-sm">Trade Volume</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="text-xl font-bold">{formatValue(regionData.tradeVolume, false, true)}</div>
                          </CardContent>
                        </Card>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-semibold mb-3">Top Trading Partners</h3>
                        <div className="space-y-2">
                          {regionData.topPartners.map((partner, index) => (
                            <div key={index} className="flex justify-between items-center p-2 rounded-md bg-muted/70">
                              <span>{partner.name}</span>
                              <div className="flex items-center space-x-4">
                                <span className="text-muted-foreground">{formatValue(partner.value)}</span>
                                <span className="text-sm">{partner.percent.toFixed(1)}%</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-semibold mb-3">Key Products</h3>
                        <div className="space-y-2">
                          {regionData.keyProducts.map((product, index) => (
                            <div key={index} className="flex justify-between items-center p-2 rounded-md bg-muted/70">
                              <span>{product.name}</span>
                              <div className="flex items-center space-x-4">
                                <span className="text-muted-foreground">{formatValue(product.value)}</span>
                                <span className="text-sm">{product.percent.toFixed(1)}%</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="h-full flex flex-col items-center justify-center text-center p-6">
                      <GlobeIcon className="h-16 w-16 text-muted-foreground mb-4" />
                      <h3 className="text-xl font-medium mb-2">Select a Country on the Map</h3>
                      <p className="text-muted-foreground max-w-md">
                        Click on a country on the map or use the search to view detailed trade data and statistics.
                      </p>
                    </div>
                  )}
                </Tabs.Content>
                
                <Tabs.Content value="statistics" className="h-full">
                  {selectedCountry && selectedCountryCode && countrySpecificTradeData.length > 0 ? (
                    <div className="space-y-6">
                      <div className="grid grid-cols-1 gap-6">
                        <div className="bg-muted/70 p-4 rounded-md">
                          <div className="mb-3">
                            <h3 className="text-lg font-semibold">Product Distribution</h3>
                            <p className="text-sm text-muted-foreground">Top products by trade value</p>
                          </div>
                          <div className="space-y-4">
                            {countrySpecificTradeData.slice(0, 10).map((item, index) => (
                              <div key={index} className="flex justify-between items-center">
                                <span>{item.product_name}</span>
                                <span className="font-medium">${(item.value / 1000).toFixed(2)}B</span>
                              </div>
                            ))}
                          </div>
                        </div>
                        
                        <div className="bg-muted/70 p-4 rounded-md">
                          <div className="mb-3">
                            <h3 className="text-lg font-semibold">Trade Flow Distribution</h3>
                            <p className="text-sm text-muted-foreground">Breakdown by import/export</p>
                          </div>
                          <div className="space-y-4">
                            {(() => {
                              // Group items by trade flow
                              const groupedByTradeFlow = countrySpecificTradeData.reduce((acc: any, item) => {
                                const flowType = item.trade_flow || (item.tradeflow_id === 103 ? 'Export' : 'Import');
                                if (!acc[flowType]) {
                                  acc[flowType] = { total: 0, count: 0 };
                                }
                                acc[flowType].total += item.value;
                                acc[flowType].count += 1;
                                return acc;
                              }, {});
                              
                              return Object.entries(groupedByTradeFlow).map(([flow, data]: [string, any], index) => (
                                <div key={index} className="flex justify-between items-center">
                                  <span>{flow} ({data.count} products)</span>
                                  <span className="font-medium">${(data.total / 1000).toFixed(2)}B</span>
                                </div>
                              ));
                            })()}
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-6">
                      <div className="grid grid-cols-1 gap-6">
                        {mockTradeStatistics.map((statGroup, index) => (
                          <div key={index} className="bg-muted/70 p-4 rounded-md">
                            <div className="mb-3">
                              <h3 className="text-lg font-semibold">{statGroup.title}</h3>
                              <p className="text-sm text-muted-foreground">{statGroup.description}</p>
                            </div>
                            <div className="space-y-4">
                              {statGroup.data.map((item, itemIndex) => (
                                <div key={itemIndex} className="flex justify-between items-center">
                                  <span>{item.name}</span>
                                  <span className="font-medium">{formatValue(item.value, item.isPercentage)}</span>
                                </div>
                              ))}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </Tabs.Content>
                
                <Tabs.Content value="relationships" className="h-full">
                  {selectedCountry && selectedCountryCode && countrySpecificTradeData.length > 0 ? (
                    <div className="space-y-6">
                      <div>
                        <h3 className="text-lg font-semibold mb-3">HS Code Distribution</h3>
                        <div className="space-y-2">
                          {(() => {
                            // Group products by HS code prefix (first 2 digits)
                            interface HSGroupItem {
                              code: string;
                              value: number;
                              percentage: number;
                              name: string; // Description for the HS group
                            }
                            
                            const groupedByHS: Record<string, HSGroupItem> = {};
                            
                            // Calculate total trade value
                            const totalValue = countrySpecificTradeData.reduce((sum, item) => sum + item.value, 0);
                            
                            // Group by HS2 code
                            countrySpecificTradeData.forEach(item => {
                              if (!item.hs_code) return;
                              
                              const hs2Code = item.hs_code.substring(0, 2);
                              const fullName = `${hs2Code}: ${item.product_name.split(' - ')[0] || item.product_name}`;
                              
                              if (!groupedByHS[hs2Code]) {
                                groupedByHS[hs2Code] = {
                                  code: hs2Code,
                                  value: 0,
                                  percentage: 0,
                                  name: fullName
                                };
                              }
                              
                              groupedByHS[hs2Code].value += item.value;
                              groupedByHS[hs2Code].percentage = (groupedByHS[hs2Code].value / totalValue) * 100;
                            });
                            
                            // Convert to array and sort by value
                            const hsGroups = Object.values(groupedByHS)
                              .sort((a, b) => b.value - a.value)
                              .slice(0, 8); // Show top 8 groups
                            
                            // Generate colors for HS groups
                            const colors = [
                              "#4361ee", "#3a0ca3", "#7209b7", "#f72585", 
                              "#4cc9f0", "#4895ef", "#560bad", "#b5179e"
                            ];
                            
                            return hsGroups.map((group, index) => (
                              <div key={index} className="flex justify-between items-center p-2 rounded-md bg-muted/70">
                                <div className="flex items-center gap-2">
                                  <div 
                                    className="w-3 h-3 rounded-full" 
                                    style={{ backgroundColor: colors[index % colors.length] }}
                                  ></div>
                                  <span>{group.name}</span>
                                </div>
                                <div className="flex items-center gap-2">
                                  <span className="text-muted-foreground">${(group.value / 1000).toFixed(2)}B</span>
                                  <span className="text-sm">{group.percentage.toFixed(1)}%</span>
                                </div>
                              </div>
                            ));
                          })()}
                        </div>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-semibold mb-3">Trade Flow Distribution</h3>
                        <div className="space-y-2">
                          {(() => {
                            // Group items by trade flow
                            interface TradeFlowItem {
                              name: string;
                              value: number;
                              percentage: number;
                              count: number;
                            }
                            
                            const groupedByTradeFlow: Record<string, TradeFlowItem> = {};
                            
                            // Calculate total trade value
                            const totalValue = countrySpecificTradeData.reduce((sum, item) => sum + item.value, 0);
                            
                            // Group by trade flow
                            countrySpecificTradeData.forEach(item => {
                              const flowType = item.trade_flow || (item.tradeflow_id === 103 ? 'Export' : 'Import');
                              
                              if (!groupedByTradeFlow[flowType]) {
                                groupedByTradeFlow[flowType] = {
                                  name: flowType,
                                  value: 0,
                                  percentage: 0,
                                  count: 0
                                };
                              }
                              
                              groupedByTradeFlow[flowType].value += item.value;
                              groupedByTradeFlow[flowType].count += 1;
                              groupedByTradeFlow[flowType].percentage = (groupedByTradeFlow[flowType].value / totalValue) * 100;
                            });
                            
                            // Convert to array
                            const tradeFlows = Object.values(groupedByTradeFlow);
                            
                            return tradeFlows.map((flow, index) => (
                              <div key={index} className="flex justify-between items-center p-2 rounded-md bg-muted/70">
                                <span>{flow.name} ({flow.count} products)</span>
                                <div className="flex items-center gap-2">
                                  <span className="text-muted-foreground">${(flow.value / 1000).toFixed(2)}B</span>
                                  <span className="text-sm">{flow.percentage.toFixed(1)}%</span>
                                </div>
                              </div>
                            ));
                          })()}
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-6">
                      <div>
                        <h3 className="text-lg font-semibold mb-3">Product Categories</h3>
                        <div className="space-y-2">
                          {mockTradeRelationships.productCategories.map((category, index) => (
                            <div key={index} className="flex justify-between items-center p-2 rounded-md bg-muted/70">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 rounded-full" style={{ backgroundColor: category.color }}></div>
                                <span>{category.name}</span>
                              </div>
                              <div className="flex items-center gap-2">
                                <span className="text-muted-foreground">{formatValue(category.value)}</span>
                                <span className="text-sm">{category.percentage.toFixed(1)}%</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-semibold mb-3">Top Trading Partners</h3>
                        <div className="space-y-2">
                          {mockTradeRelationships.tradingPartners.map((partner, index) => (
                            <div key={index} className="flex justify-between items-center p-2 rounded-md bg-muted/70">
                              <span>{partner.name}</span>
                              <div className="flex items-center gap-2">
                                <span className="text-muted-foreground">{formatValue(partner.value)}</span>
                                <span className="text-sm">{partner.percentage.toFixed(1)}%</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                </Tabs.Content>
              </CardContent>
            </Tabs.Root>
          </Card>
          
          {/* Bottom insights */}
          <Card className="shadow-sm bg-background/80 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-base">Latest Insights</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Global trade growth projected to increase by 3.5% in 2024, driven by technology sector expansion and recovery in manufacturing output across developing economies.
              </p>
            </CardContent>
          </Card>
        </ClientOnly>
      </div>
    </div>
  );
} 